"""
Django settings for olhar_literario_django project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Logging de debug para Railway
print("=" * 50)
print("üöÄ OLHAR LITER√ÅRIO - INICIANDO DJANGO")
print("=" * 50)
print(f"üìÅ BASE_DIR: {BASE_DIR}")
print(f"üîë SECRET_KEY configurada: {'Sim' if os.environ.get('SECRET_KEY') else 'N√£o (usando fallback)'}")
print(f"üêõ DEBUG: {os.environ.get('DEBUG', 'True')}")
print(f"üóÑÔ∏è  DATABASE_URL: {'Configurada ‚úÖ' if os.environ.get('DATABASE_URL') else 'N√£o configurada (usando SQLite)'}")
print("=" * 50)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-gere-uma-chave-secreta-aqui-em-producao')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'books.apps.BooksConfig',  # Nossa app principal
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Para servir arquivos est√°ticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'olhar_literario_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Pasta templates dentro de olhar_literario_django
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'olhar_literario_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Usar PostgreSQL se DATABASE_URL estiver dispon√≠vel (Railway), sen√£o SQLite
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Produ√ß√£o - PostgreSQL no Railway
    print(f"üîµ Usando PostgreSQL em produ√ß√£o")
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Desenvolvimento - SQLite local
    print(f"üü° Usando SQLite local (desenvolvimento)")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Arquivos est√°ticos do frontend (HTML, CSS, JS)
# IMPORTANTE: N√£o incluir BASE_DIR.parent para evitar loop infinito com staticfiles
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Pasta static dentro de olhar_literario_django (CSS, JS, logo)
    BASE_DIR.parent / 'images',  # Pasta images do projeto (capas de livros)
]

# Media files (uploads de usu√°rios - fotos de perfil e capas de livros)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'  # Pasta media dentro de olhar_literario_django

# Permitir servir arquivos est√°ticos em desenvolvimento
# Em produ√ß√£o, use um servidor web (nginx, apache, etc)
import os
if DEBUG:
    # Servir arquivos est√°ticos em desenvolvimento
    STATICFILES_FINDERS = [
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CSRF Settings - Configura√ß√£o para produ√ß√£o
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://*.railway.app',  # Permitir dom√≠nios do Railway
]

# Configura√ß√£o do WhiteNoise para arquivos est√°ticos (SIMPLIFICADO)
# Usar configura√ß√£o b√°sica para evitar problemas com collectstatic
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Configura√ß√£o de Logging para produ√ß√£o
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
